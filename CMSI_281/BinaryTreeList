
import java.util.*;

public class BinaryTree extends java.lang.Object implements java.util.Collection {
   
   public ArrayList<Object> tree;
      
   public BinaryTree() {
      tree = new ArrayList<Object>(0);
   }
   
   public BinaryTree(Object obj) {
      tree = new ArrayList<Object>(1000);
      tree.set(1,obj);
   }
   
   public boolean add(Object obj) {
      Object temp = tree.get(1);
      Object temp2 = new Object();
      tree.set(1,obj);
      int i = 2;
      while(tree.get(i)!=null) {
         temp2 = tree.get(i);
         tree.set(i,temp);
         temp = temp2;
         if(tree.get(2*i)!=null) {
            i = (2*i);
         } else if(tree.get(2*i+1)!=null){
            i = 2*i+1;
         } else {
            i++;
         }
      }
      return true;
      //needs to push every item appropriately down on the list (either to the left or right child)
      //needs to hold the value of whatever space is being replaced
      //needs to push THAT value down to the appropriate space   
   }
   
   public boolean addAll(java.util.Collection c) {
      return true;
   }
   
   public void clear() {
      for(int i = tree.size()-1; i >=0; i--) {
         tree.remove(i);
      }
   }
   
   public static BinaryTree construct(Object obj, BinaryTree leftSubtree, 
                                       BinaryTree rightSubtree) {
      BinaryTree temp = new BinaryTree(obj);
      temp.add(leftSubtree);
      temp.add(rightSubtree);
      return temp;
   }
   
   public boolean contains(Object obj) {
      for(int i = 0; i < tree.size(); i++) {
            if(tree.get(i)==obj) {
               return true;
            }
         }
      return false; 
   }
   
   public boolean containsAll(java.util.Collection c) {
      return true;
   }
   
   public boolean equals(Object obj) {
      for(int i = 1; i < tree.size(); i++) {
         if(tree.get(i)==obj) {
            return true;
         }
      }
      return false;
   }
   
   public int hashCode() {
      return super.hashCode();
   }
   
   public java.util.Iterator inorderIterator() {
      throw new UnsupportedOperationException();
   }
   
   public boolean isEmpty() {
      for(int i = 1; i < tree.size(); i++) {
         if(tree.get(i)!=null) {
            return false;
         }
      }
      return true;
   }
   
   public java.util.Iterator iterator() {
      Iterator<Object> it = new Iterator<Object>() {
      
         public int currentIndex = 1;
         public int backtrack = 0;
         
         public boolean hasNext() {
            int tally = 0;
            if(tree.get(currentIndex)!=null) {
               return true;
            } else if(tree.get(currentIndex*2)!=null){
               return true;
            } else if(tree.get(currentIndex*2+1)!=null) {
               return true;
            } else {
               for(int i = 0; i < currentIndex; i++) {
                  if(tree.get(currentIndex+i)==null) {
                     tally++;
                   }
               }
               if(tally==currentIndex) {
                  return false;
               }
            }
            return true;       
         }
         
         public Object next() {
            if(this.hasNext()==true) {
               int temp = currentIndex;
               currentIndex = (2*temp);
               backtrack = temp;
               if(tree.get(currentIndex)==null) {
                  currentIndex++;
               }
               if(tree.get(currentIndex)==null) {
                  currentIndex = backtrack+1;
               }
               return tree.get(temp);
            }
            return null;
         }
         
         public void remove() {
            tree.remove(currentIndex);
         }
         
     };
     return it;
   }
   
   public boolean remove(Object obj) {
      for(int i = 1; i < tree.size(); i++) {
         if(tree.get(i)==obj) {
            tree.set(i,null);
            return true;
         }
      }
      return false;
   }
   
   public boolean removeAll(java.util.Collection c) {
      throw new UnsupportedOperationException();
   }
   
   public boolean retainAll(java.util.Collection c) {
      throw new UnsupportedOperationException();
   }
   
   public int size() {
      return tree.size();
   }
   
   public java.lang.Object[] toArray() {
      Object[] output = new Object[tree.size()];
      int tally = 0;
      for(int i = 0; i < tree.size(); i++) {
         if(tree.get(i)!=null) {
            output[i] = tree.get(i);
         }
      }
      return output;
   }
   
   public java.lang.Object[] toArray(java.lang.Object[] obj) {
      throw new UnsupportedOperationException();
   }
   
   public java.lang.String toString() {
      throw new UnsupportedOperationException();
      //eliminate nulls, present the numbers in some visual representation of order
      //n[2n][2n+1], but don't show it if a number is null
   }
   
   public static void main(String[] args) {
      
   }
}
