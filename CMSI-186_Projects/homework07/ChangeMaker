/* Brady Petrik
   CMSI 186-02
   homework07 - ChangeMaker
   Last Modified: 5/4/2017
   Purpose: "You make change." 
            "...oh my god." 
            "Yeah. Welcome to the party, pal" */
            
import java.util.Arrays;
import java.util.Scanner;
            
public class ChangeMaker {

    public static final Scanner console = new Scanner(System.in);
    private static int moneyAmount = 0;

    public static void main(String[] args) {
        System.out.println("How many coin denominations would you like to enter?");
        int denomNumber = console.nextInt();
        int[] denoms = new int[denomNumber];
        for(int i = 0; i < denomNumber; i++) {
           int input = 0;
           System.out.println("What is your number " + (i+1) + " coin denomination?");
           input = console.nextInt();
           denoms[i] = input;
        }
        Arrays.sort(denoms);
        System.out.println("What is the amount, in cents, of the change you would like to make?");
        moneyAmount = console.nextInt();
        makeChangeWithDynamicProgramming(denoms, moneyAmount);
        
        if (args.length != 2) {
            printUsage();
            return;
        }

        try {

            String[] denominationStrings = args[0].split(",");
            int[] denominations = new int[denominationStrings.length];

            for (int i = 0; i < denominations.length; i++) {
                denominations[i] = Integer.parseInt(denominationStrings[i]);
                if (denominations[i] <= 0) {
                    System.out.println("Denominations must all be greater than zero.\n");
                    printUsage();
                    return;
                }

                for (int j = 0; j < i; j++) {
                    if (denominations[j] == denominations[i]) {
                        System.out.println("Duplicate denominations are not allowed.\n");
                        printUsage();
                        return;
                    }
                }
            }

            int amount = Integer.parseInt(args[1]);
            if (amount < 0) {
                System.out.println("Change cannot be made for negative amounts.\n");
                printUsage();
                return;
            }



            Tuple change = makeChangeWithDynamicProgramming(denominations, amount);
            if (change.isImpossible()) {
                System.out.println("It is impossible to make " + amount + " cents with those denominations.");
            } else {
                int coinTotal = change.total();
                System.out.println(amount + " cents can be made with " + coinTotal + " coin" +
                        getSimplePluralSuffix(coinTotal) + " as follows:");

                for (int i = 0; i < denominations.length; i++) {
                    int coinCount = change.getElement(i);
                    System.out.println("- "  + coinCount + " " + denominations[i] + "-cent coin" +
                            getSimplePluralSuffix(coinCount));
                }
            }
        } catch (NumberFormatException nfe) {
            System.out.println("Denominations and amount must all be integers.\n");
            printUsage();
        }
        makeChangeWithDynamicProgramming(denoms, moneyAmount);
    }

    public static Tuple makeChangeWithDynamicProgramming(int[] denoms, int amount) {
        int tableVal = denoms.length * (amount-1);
        Tuple[] tupleArray = new Tuple[tableVal];
        int totalAmount = 0;
        Tuple totalTuple = new Tuple(denoms.length);
      for(int i = 0; i < denoms.length; i++) {
         for(int j = 0; j < amount + 1; j++) { 
            //this for loop goes through and assigns appropriate values to every tuple based on input denominations        
            if(j != 0 && denoms[i] % j == 0) {
               tupleArray[i+j].setElement(i, denoms[i]/j);
               totalAmount += denoms[i]/j;
               totalTuple.add(tupleArray[i+j]);
            } else if(i != 0) {
               int remainderTest = denoms[i] % j;
               for(int k = i-1; k >= 0; k--) {
                  //this loop checks to see if the remainder can be made up by any previous denominations
                  if(remainderTest % k == 0) {
                     tupleArray[i+j].setElement(i, denoms[i]/j);
                     tupleArray[i+j].setElement(k, remainderTest/k);
                     totalAmount += ((denoms[i]/j) + (remainderTest/k));
                     totalTuple.add(tupleArray[i+j]);
                  }
               }
               if(totalAmount == amount) {
                  String totalString = totalTuple.toString();
                  System.out.println("We can make you change!");
                  System.out.println(totalString);
               }
           }
           //this is where I would put a method to sort through tuples to see if change could be made
           //from the tuples that were created above 
         }           
      }
       
        return totalTuple;
    }

    private static void printUsage() {
        System.out.println("Usage: java ChangeMaker <denominations> <amount>");
        System.out.println("  - <denominations> is a comma-separated list of denominations (no spaces)");
        System.out.println("  - <amount> is the amount for which to make change");
    }

    private static String getSimplePluralSuffix(int count) {
        return count == 1 ? "" : "s";
    }

}
