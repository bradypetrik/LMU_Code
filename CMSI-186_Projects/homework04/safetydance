/* Brady Petrik
   CMSI 186-02
   homework04 - ClockSolver
   Last Modified: 
   Purpose:  */
   
import java.lang.Math;
import java.util.Scanner;
   
public class ClockSolver {

   public static int hours = 12;
   public static int minutes = 0;
   public static double angle = 45.0;
   public static double timeSlice = 60.0;
   public static Clock testClock = new Clock();
   public static int totalTime = 43200;
   public static final Scanner console = new Scanner(System.in);
   
   public static void main(String[] args) {
      double s = 0.0;
      System.out.println("Please input an angle to run the Clock Solver");
      s = console.nextDouble();
      angle = s;
      System.out.println("Now input a time slice to run the Clock Solver");
      s = console.nextDouble();
      timeSlice = s;
      timeMoves();
   }
   
   //Problem: method stops when minutes reaches 55
   //Solution: need to make angle change in Clock class variable on the time slice
   //          which means I'll need to either pass in the angle to the Clock class
   //          or make the variable native to the ClockSolver class instead
   //Problem: accomodate for times after the clock passes 0 minutes, like 9:02 should appear
   //         in the 90 slot but it doesn't
   //Solution: put the angle aspect of the tick method in the ClockSolver class

   public static void timeMoves() {
      System.out.println("The hands of the clock are at an approximately " + angle + " degree angle at the following times:");
      double hoursAngle = 0.0;
      double minutesAngle = 0.0;
      double totalAngle = 0.0;
      for(int i = 0; i < totalTime; i++) {
         testClock.tick();
         //Has the clock tick for every i value, but only sets values when the time slice has passed
         if((i*60) % timeSlice == 0) {
         //fix this variable so it doesnt only work for 60 seconds
            hoursAngle = testClock.getHoursAngle();
            minutesAngle = testClock.getMinutesAngle();
            totalAngle = minutesAngle - hoursAngle;
            if(testClock.getHours() == 12) {
               break;
            }
            //accounts for reverse angles, not just dependent on the hour hand as the base line for the angle
            //also solves issue of continuing output once minutes pass 60
            if(minutesAngle < hoursAngle) {
               totalAngle = hoursAngle - minutesAngle;
            }
            if(Math.abs(totalAngle - angle) <= 5) {
               System.out.println(testClock.toString());
            }
         }
      }     
   }
}
